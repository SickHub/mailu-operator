openapi: 3.0.1
info:
  title: Mailu API
  version: "1.0"
servers:
- url: /api/v1
security:
- Bearer: []
tags:
- name: user
  description: User operations
- name: domain
  description: Domain operations
- name: alternative
  description: Alternative operations
- name: alias
  description: Alias operations
- name: relay
  description: Relay operations
- name: token
  description: Token operations
paths:
  /alias:
    get:
      tags:
      - alias
      summary: List all aliases
      operationId: list_alias
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alias'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - alias
      summary: Create a new alias
      operationId: create_alias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alias'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "409":
          description: Duplicate alias
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /alias/destination/{domain}:
    get:
      tags:
      - alias
      summary: Look up the aliases of the specified domain
      operationId: find_alias_filter_domain
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Alias or domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
  /alias/{alias}:
    get:
      tags:
      - alias
      summary: Look up the specified alias
      operationId: find_alias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    delete:
      tags:
      - alias
      summary: Delete the specified alias
      operationId: delete_alias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    patch:
      tags:
      - alias
      summary: Update the specfied alias
      operationId: update_alias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasUpdate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /alternative:
    get:
      tags:
      - alternative
      summary: List all alternatives
      operationId: list_alternative
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlternativeDomain'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - alternative
      summary: Create a new alternative (for domain)
      operationId: create_alternative
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlternativeDomain'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Domain not found or missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "409":
          description: Duplicate alternative domain name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /alternative/{alt}:
    get:
      tags:
      - alternative
      summary: Look up the specified alternative (of domain)
      operationId: find_alternative
      parameters:
      - name: alt
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlternativeDomain'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Alternative not found or missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    delete:
      tags:
      - alternative
      summary: Delete the specified alternative (for domain)
      operationId: delete_alternative
      parameters:
      - name: alt
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Alternative/Domain not found or missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "409":
          description: Duplicate domain name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
  /domain:
    get:
      tags:
      - domain
      summary: List all domains
      operationId: list_domain
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DomainGet'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - domain
      summary: Create a new domain
      operationId: create_domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "409":
          description: Duplicate domain/alternative name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /domain/{domain}:
    get:
      tags:
      - domain
      summary: Look up the specified domain
      operationId: find_domain
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainGet'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    delete:
      tags:
      - domain
      summary: Delete the specified domain
      operationId: delete_domain
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    patch:
      tags:
      - domain
      summary: Update the specified domain
      operationId: update_domain
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainUpdate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "409":
          description: Duplicate domain/alternative name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /domain/{domain}/dkim:
    post:
      tags:
      - domain
      summary: Generate new DKIM/DMARC keys for the specified domain
      operationId: generate_dkim
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
  /domain/{domain}/manager:
    get:
      tags:
      - domain
      summary: List all managers of the specified domain
      operationId: list_managers
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manager'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    post:
      tags:
      - domain
      summary: Create a new domain manager for the specified domain
      operationId: create_manager
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagerCreate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: User or domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "409":
          description: Duplicate domain manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /domain/{domain}/manager/{email}:
    get:
      tags:
      - domain
      summary: Check if the specified user is a manager of the specified domain
      operationId: find_manager
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Manager not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    delete:
      tags:
      - domain
      summary: Delete the specified manager of the specified domain
      operationId: delete_manager
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Manager not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
  /domain/{domain}/users:
    get:
      tags:
      - domain
      summary: List all the users from the specified domain
      operationId: list_user_domain
      parameters:
      - name: domain
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
  /relay:
    get:
      tags:
      - relay
      summary: List all relays
      operationId: list_relays
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relay'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - relay
      summary: Create a new relay
      operationId: create_relay
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relay'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "409":
          description: Duplicate relay
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /relay/{name}:
    get:
      tags:
      - relay
      summary: Look up the specified relay
      operationId: find_relay
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relay'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Relay not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    delete:
      tags:
      - relay
      summary: Delete the specified relay
      operationId: delete_relay
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Relay not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    patch:
      tags:
      - relay
      summary: Update the specified relay
      operationId: update_relay
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelayUpdate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Relay not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /token:
    get:
      tags:
      - token
      summary: List all tokens
      operationId: list_tokens
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenGetResponse'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - token
      summary: Create a new token
      operationId: create_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPost'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPostResponse'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /token/{token_id}:
    get:
      tags:
      - token
      summary: Find the specified token
      operationId: find_token
      parameters:
      - name: token_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGetResponse'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    delete:
      tags:
      - token
      summary: Delete the specified token
      operationId: delete_token
      parameters:
      - name: token_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    patch:
      tags:
      - token
      summary: Update the specified token
      operationId: update_token
      parameters:
      - name: token_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPost2'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /tokenuser/{email}:
    get:
      tags:
      - token
      summary: Look up all the tokens of the specified user
      operationId: find_tokens_of_user
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGetResponse'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    post:
      tags:
      - token
      summary: Create a new token for the specified user
      operationId: create_token
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPost2'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPostResponse'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /user:
    get:
      tags:
      - user
      summary: List all users
      operationId: list_user
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGet'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - user
      summary: Create a new user
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "409":
          description: Duplicate user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
  /user/{email}:
    get:
      tags:
      - user
      summary: Look up the specified user
      operationId: find_user
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    delete:
      tags:
      - user
      summary: Delete the specified user
      operationId: delete_user
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
    patch:
      tags:
      - user
      summary: Update the specified user
      operationId: update_user
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Input validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "401":
          description: Authorization header missing
          content: {}
        "403":
          description: Invalid authorization header
          content: {}
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - Bearer: []
      x-codegen-request-body-name: payload
components:
  schemas:
    UserCreate:
      required:
      - email
      - raw_password
      type: object
      properties:
        email:
          type: string
          description: The email address of the user
          example: John.Doe@example.com
        raw_password:
          type: string
          description: The raw (plain text) password of the user. Mailu will hash
            the password using BCRYPT-SHA256
          example: secret
        comment:
          type: string
          description: A description for the user. This description is shown on the
            Users page
          example: my comment
        quota_bytes:
          type: integer
          description: The maximum quota for the user’s email box in bytes
          example: 1000000000
        global_admin:
          type: boolean
          description: Make the user a global administrator
        enabled:
          type: boolean
          description: "Enable the user. When an user is disabled, the user is unable\
            \ to login to the Admin GUI or webmail or access his email via IMAP/POP3\
            \ or send mail"
        change_pw_next_login:
          type: boolean
          description: Force the user to change their password at next login
        enable_imap:
          type: boolean
          description: Allow email retrieval via IMAP
        enable_pop:
          type: boolean
          description: Allow email retrieval via POP3
        allow_spoofing:
          type: boolean
          description: Allow the user to spoof the sender (send email as anyone)
        forward_enabled:
          type: boolean
          description: Enable auto forwarding
        forward_destination:
          type: array
          example: "[\"Other@example.com\"]"
          items:
            type: string
            description: Email address to forward emails to
        forward_keep:
          type: boolean
          description: Keep a copy of the forwarded email in the inbox
        reply_enabled:
          type: boolean
          description: Enable automatic replies. This is also known as out of office
            (ooo) or out of facility (oof) replies
        reply_subject:
          type: string
          description: Optional subject for the automatic reply
          example: Out of office
        reply_body:
          type: string
          description: The body of the automatic reply email
          example: "Hello, I am out of office. I will respond when I am back."
        reply_startdate:
          type: string
          description: Start date for automatic replies in YYYY-MM-DD format.
          format: date
          example: 2022-02-10
        reply_enddate:
          type: string
          description: End date for automatic replies in YYYY-MM-DD format.
          format: date
          example: 2022-02-22
        displayed_name:
          type: string
          description: The display name of the user within the Admin GUI
          example: John Doe
        spam_enabled:
          type: boolean
          description: Enable the spam filter
        spam_mark_as_read:
          type: boolean
          description: Enable marking spam mails as read
        spam_threshold:
          type: integer
          description: The user defined spam filter tolerance
          example: 80
    Response:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    UserGet:
      type: object
      properties:
        email:
          type: string
          description: The email address of the user
          example: John.Doe@example.com
        password:
          type: string
          description: "Hash of the user's password; Example='$bcrypt-sha256$v=2,t=2b,r=12$fmsAdJbYAD1gGQIE5nfJq.$zLkQUEs2XZfTpAEpcix/1k5UTNPm0jO'"
        comment:
          type: string
          description: A description for the user. This description is shown on the
            Users page
          example: my comment
        quota_bytes:
          type: integer
          description: The maximum quota for the user’s email box in bytes
          example: 1000000000
        quota_bytes_used:
          type: integer
          description: The size of the user’s email box in bytes
          example: 5000000
        global_admin:
          type: boolean
          description: Make the user a global administrator
        enabled:
          type: boolean
          description: "Enable the user. When an user is disabled, the user is unable\
            \ to login to the Admin GUI or webmail or access his email via IMAP/POP3\
            \ or send mail"
        change_pw_next_login:
          type: boolean
          description: Force the user to change their password at next login
        enable_imap:
          type: boolean
          description: Allow email retrieval via IMAP
        enable_pop:
          type: boolean
          description: Allow email retrieval via POP3
        allow_spoofing:
          type: boolean
          description: Allow the user to spoof the sender (send email as anyone)
        forward_enabled:
          type: boolean
          description: Enable auto forwarding
        forward_destination:
          type: array
          example: "[\"Other@example.com\"]"
          items:
            type: string
            description: Email address to forward emails to
        forward_keep:
          type: boolean
          description: Keep a copy of the forwarded email in the inbox
        reply_enabled:
          type: boolean
          description: Enable automatic replies. This is also known as out of office
            (ooo) or out of facility (oof) replies
        reply_subject:
          type: string
          description: Optional subject for the automatic reply
          example: Out of office
        reply_body:
          type: string
          description: The body of the automatic reply email
          example: "Hello, I am out of office. I will respond when I am back."
        reply_startdate:
          type: string
          description: Start date for automatic replies in YYYY-MM-DD format.
          format: date
          example: 2022-02-10
        reply_enddate:
          type: string
          description: End date for automatic replies in YYYY-MM-DD format.
          format: date
          example: 2022-02-22
        displayed_name:
          type: string
          description: The display name of the user within the Admin GUI
          example: John Doe
        spam_enabled:
          type: boolean
          description: Enable the spam filter
        spam_mark_as_read:
          type: boolean
          description: Enable marking spam mails as read
        spam_threshold:
          type: integer
          description: The user defined spam filter tolerance
          example: 80
    UserUpdate:
      type: object
      properties:
        raw_password:
          type: string
          description: The raw (plain text) password of the user. Mailu will hash
            the password using BCRYPT-SHA256
          example: secret
        comment:
          type: string
          description: A description for the user. This description is shown on the
            Users page
          example: my comment
        quota_bytes:
          type: integer
          description: The maximum quota for the user’s email box in bytes
          example: 1000000000
        global_admin:
          type: boolean
          description: Make the user a global administrator
        enabled:
          type: boolean
          description: "Enable the user. When an user is disabled, the user is unable\
            \ to login to the Admin GUI or webmail or access his email via IMAP/POP3\
            \ or send mail"
        change_pw_next_login:
          type: boolean
          description: Force the user to change their password at next login
        enable_imap:
          type: boolean
          description: Allow email retrieval via IMAP
        enable_pop:
          type: boolean
          description: Allow email retrieval via POP3
        allow_spoofing:
          type: boolean
          description: Allow the user to spoof the sender (send email as anyone)
        forward_enabled:
          type: boolean
          description: Enable auto forwarding
        forward_destination:
          type: array
          example: "[\"Other@example.com\"]"
          items:
            type: string
            description: Email address to forward emails to
        forward_keep:
          type: boolean
          description: Keep a copy of the forwarded email in the inbox
        reply_enabled:
          type: boolean
          description: Enable automatic replies. This is also known as out of office
            (ooo) or out of facility (oof) replies
        reply_subject:
          type: string
          description: Optional subject for the automatic reply
          example: Out of office
        reply_body:
          type: string
          description: The body of the automatic reply email
          example: "Hello, I am out of office. I will respond when I am back."
        reply_startdate:
          type: string
          description: Start date for automatic replies in YYYY-MM-DD format.
          format: date
          example: 2022-02-10
        reply_enddate:
          type: string
          description: End date for automatic replies in YYYY-MM-DD format.
          format: date
          example: 2022-02-22
        displayed_name:
          type: string
          description: The display name of the user within the Admin GUI
          example: John Doe
        spam_enabled:
          type: boolean
          description: Enable the spam filter
        spam_mark_as_read:
          type: boolean
          description: Enable marking spam mails as read
        spam_threshold:
          type: integer
          description: The user defined spam filter tolerance
          example: 80
    Domain:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: FQDN (e.g. example.com)
          example: example.com
        comment:
          type: string
          description: a comment
        max_users:
          minimum: -1
          type: integer
          description: maximum number of users
        max_aliases:
          minimum: -1
          type: integer
          description: maximum number of aliases
        max_quota_bytes:
          minimum: 0
          type: integer
          description: maximum quota for mailbox
        signup_enabled:
          type: boolean
          description: allow signup
        alternatives:
          type: array
          example: "[\"example.com\"]"
          items:
            type: string
            description: FQDN
    DomainGet:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: FQDN (e.g. example.com)
          example: example.com
        comment:
          type: string
          description: a comment
        managers:
          type: array
          items:
            type: string
            description: manager of domain
        max_users:
          minimum: -1
          type: integer
          description: maximum number of users
        max_aliases:
          minimum: -1
          type: integer
          description: maximum number of aliases
        max_quota_bytes:
          minimum: 0
          type: integer
          description: maximum quota for mailbox
        signup_enabled:
          type: boolean
          description: allow signup
        alternatives:
          type: array
          example: "[\"example.com\"]"
          items:
            type: string
            description: FQDN
        dns_autoconfig:
          type: array
          items:
            type: string
            description: DNS client auto-configuration entry
        dns_mx:
          type: string
        dns_spf:
          type: string
        dns_dkim:
          type: string
        dns_dmarc:
          type: string
        dns_dmarc_report:
          type: string
        dns_tlsa:
          type: array
          items:
            type: string
    DomainUpdate:
      type: object
      properties:
        comment:
          type: string
          description: a comment
        max_users:
          minimum: -1
          type: integer
          description: maximum number of users
        max_aliases:
          minimum: -1
          type: integer
          description: maximum number of aliases
        max_quota_bytes:
          minimum: 0
          type: integer
          description: maximum quota for mailbox
        signup_enabled:
          type: boolean
          description: allow signup
        alternatives:
          type: array
          example: "[\"example.com\"]"
          items:
            type: string
            description: FQDN
    ManagerCreate:
      required:
      - user_email
      type: object
      properties:
        user_email:
          type: string
          description: email address of manager
    Manager:
      type: object
      properties:
        managers:
          type: array
          items:
            type: string
            description: manager of domain
    AlternativeDomain:
      required:
      - domain
      - name
      type: object
      properties:
        name:
          type: string
          description: alternative FQDN
          example: example2.com
        domain:
          type: string
          description: domain FQDN
          example: example.com
    Alias:
      allOf:
      - $ref: '#/components/schemas/AliasUpdate'
      - required:
        - email
        type: object
        properties:
          email:
            type: string
            description: the alias email address
            example: user@example.com
          destination:
            type: array
            items:
              type: string
              description: destination email address
              example: user@example.com
    AliasUpdate:
      type: object
      properties:
        comment:
          type: string
          description: a comment
        destination:
          type: array
          items:
            type: string
            description: alias email address
            example: user@example.com
        wildcard:
          type: boolean
          description: enable SQL Like wildcard syntax
    Relay:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: relayed domain name
          example: example.com
        smtp:
          type: string
          description: remote host
          example: example.com
        comment:
          type: string
          description: a comment
    RelayUpdate:
      type: object
      properties:
        smtp:
          type: string
          description: remote host
          example: example.com
        comment:
          type: string
          description: a comment
    TokenPost:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: The email address of the user
          example: John.Doe@example.com
        comment:
          type: string
          description: A description for the token. This description is shown on the
            Authentication tokens page
          example: my comment
        AuthorizedIP:
          type: array
          items:
            type: string
            description: White listed IP addresses or networks that may use this token.
            example: 203.0.113.0/24
    TokenPostResponse:
      type: object
      properties:
        id:
          type: string
          description: The record id of the token (unique identifier)
          example: "1"
        token:
          type: string
          description: The created authentication token for the user.
          example: 2caf6607de5129e4748a2c061aee56f2
        email:
          type: string
          description: The email address of the user
          example: John.Doe@example.com
        comment:
          type: string
          description: A description for the token. This description is shown on the
            Authentication tokens page
          example: my comment
        AuthorizedIP:
          type: array
          items:
            type: string
            description: White listed IP addresses or networks that may use this token.
            example: 203.0.113.0/24
        Created:
          type: string
          description: The date when the token was created
          example: John.Doe@example.com
    TokenGetResponse:
      type: object
      properties:
        id:
          type: string
          description: The record id of the token (unique identifier)
          example: "1"
        email:
          type: string
          description: The email address of the user
          example: John.Doe@example.com
        comment:
          type: string
          description: A description for the token. This description is shown on the
            Authentication tokens page
          example: my comment
        AuthorizedIP:
          type: array
          items:
            type: string
            description: White listed IP addresses or networks that may use this token.
            example: 203.0.113.0/24
        Created:
          type: string
          description: The date when the token was created
          example: John.Doe@example.com
        Last edit:
          type: string
          description: The date when the token was last modifified
          example: John.Doe@example.com
    TokenPost2:
      type: object
      properties:
        comment:
          type: string
          description: A description for the token. This description is shown on the
            Authentication tokens page
          example: my comment
        AuthorizedIP:
          type: array
          items:
            type: string
            description: White listed IP addresses or networks that may use this token.
            example: 203.0.113.0/24
  responses:
    ParseError:
      description: When a mask can't be parsed
      content: {}
    MaskError:
      description: When any error occurs on mask
      content: {}
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
x-original-swagger-version: "2.0"
